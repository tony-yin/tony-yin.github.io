[{"title":"PHP-Excel 开发解决方案","url":"/2017/09/18/PHP-Excel/","content":" 过去工作中使用`PHPExcel`较多，碰到并解决了各种大大小小的问题，总结出这样一篇文章，一方面记录自己踩过的坑，一方面与大家分享，让大家少走弯路，并不断完善之，欢迎大家去`github`上面`star`和提交`pull request`，不断补充和优化，打造最全面的`PHPExcel`开发解决方案\n\nGithub 地址：https://github.com/tony-yin/PHPExcel_Road\n原文地址：http://192.168.1.125:4000/2017/09/18/PHP-Excel/\n\n<!--more-->\n\n## 基础：小试牛刀\n\n### 1. 引用文件\n\n```\nyourpath . /phpexcel/PHPExcel.php\n```\n\n### 2. 实例化phpexcel类\n\n```\n\"xcel = new PHPExcel();\n```\n\n### 3. 获取当前单sheet（多sheet会在下面讲）\n\n```\n$objexcel = \"xcel->getActiveSheet();\n```\n\n### 4. 合并单元格\n\n```\n$objexcel->mergeCells('A1:M1');\n```\n\n### 5. 获取一个cell的样式\n\n```\n$objexcel->getStyle('A1');\n```\n\n+ 获取一个cell的字体样式\n\n```\n$cellFont = $objexcel->getStyle('A1')->getFont();\n```\n+ 设置字体大小\n\n```\n$fontStyle->setSize(15);\n```\n+ 设置字体是否加粗\n\n```\n$fontStyle->setBold(true);\n```\n+ 设置字体颜色\n\n```\n$fontStyle->getColor()->setARGB(PHPExcel_Style_Color::COLOR_RED);\n```\n+ 获取一行样式\n\n```\n$rowStyle = $objexcel->getStyle(1)->getRowDimension();\n```\n+ 设置行高度\n\n```\n$rowStyle->setRowHeight(2);\n```\n+ 获取一列样式\n\n```\n$columnStyle = $objexcel->getStyle('A')->getColumnDimension();\n```\n+ 设置列宽度\n\n```\n$columnStyle->setWidth(10);\n```\n+ 获取一列对齐样式\n\n```\n$alignStyle = $objexcel->getStyle('A')->getAlignment();\n```\n+ 设置水平居中：同一水平线上居中，即为左右的中间\n\n```\n$alignStyle>setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);\n```\n+ 设置垂直居中：同一垂直线居中，即为上下的中间\n\n```\n$alignStyle->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);\n```\n+ 自动换行\n\n```\n$$alignStyle->setWrapText(true);\n```\n\n### 6. 获取指定版本excel写对象\n如需更早的版本可将`Excel2007`换成`Excel5`\n```\n$write = PHPExcel_IOFactory::createWriter(\"xcel, 'Excel2007');\n```\n\n## 进阶：一些有用的小知识\n\n### 1.行列数字索引方法\n> `phpexcel`一般获取`cell`或者获取列都是通过`ABC`这样的英文字母获取的，它也可以通过`0、1、2、3`这样的数字表示sheet中的列，从`0`开始，`0`对应`A`，`1`对应`B`，基本上大多数方法都是数字行列索引，例如`getStyleByColumnAndRow($col,$row)`,默认列参数在前，行参数在后，更多的可以参加`phpexcel`源码；\n\n### 2. 单行或单列参数格式\n> 有的时候一个方法需要行列两个参数，例如只需要某一行参数可写成`(null, $row)`,例如只需要获得某一列参数可写成`($col, null)`\n\n### 3. 列的数字索引格式和字母索引格式互转\n\n+ 数字转字符串\n\n```php\nPHPExcel_Cell::columnIndexFromString('A');  // Return 1 not 0;\n```\n+ 字符串转数字\n\n```php\nPHPExcel_Cell::stringFromColumnIndex(0);    // Return 'A';\n```\n\n### 4.PHPExcel读取数字类型 \n> `PHPExcel`读取的`cell`数字，类型都是`double`型，可用`gettyle()`方法检测类型，当初我一直使用`is_int()`方法无果，搞得焦头烂额。。。\n\n### 5. 多cell边框线设置\n`PHPExcel`生成的表格如果你不加处理，是不会帮你生成边框线的，生成边框线的方法如下：\n```php\n$borderArray = array(\n        'borders' => array(\n                    'allborders' => array(\n                                    'style' => PHPExcel_Style_Border::BORDER_THIN\n                                                 )\n                            )\n            );\n$objexcel->getStyle($col1, $row1,$col2, $row2)->applyFromArray($borderArray);\n```\n>注：\n> 1: `getStyle()`可以看需求改为`getStyleByColumnAndRow()`方法通过数字行列索引读取`style`\n> 2: array中`PHPExcel_Style_Border::`后面有三种格式分别是`BORDER_THIN`和`BORDR_MEDIUM`，表示边框线的粗细；\n> 3: `getStyle()`中的索引可以是静态的，也可以是动态的，一般是在导出`excel`的数据`set`完毕后填写左上角的单元格行列索引和右下角的单元格行列索引；\n\n> 参考资料\n>\n> http://phpexcel.codeplex.com/workitem/22160\n> http://phpexcel.codeplex.com/workitem/20150\n\n### 6. 多cell字体加粗处理\n\n```\n$objexcel->getStyle($pCoordinate)->applyFromArray(array(\n    'font' => array(  \n        'bold' => true,                                              \n    ),                                                               \n));\n```\n\n### 7. 多cell字体颜色处理\n\n```\n$objexcel->getStyle($pCoordinate)->applyFromArray(array(\n    'font' => array(\n        'color' => array(\n            'rgb' => 'ff0000',\n            ),\n        ),\n    )\n);\n```\n\n### 8. 多sheet导入\n\n动态为当前`sheet`设置索引，然后获取当前`sheet`，便可循环读取每一个`sheet`内容\n\n```php\n$objexcel->setActiveSheetIndex($index);   //$index = 0 1 2 3\n$objexcel->getActiveSheet();    //return sheet1 sheet2 sheet 3\n```\n\n### 9. 固定格式excel读取在写入\n\n> 当需求是给定一个一个模板`excel`，需要往里面塞数据，我们不一定要通过代码给它设定样式，如果这个模板变化不大，我们完全可以存放一个格式相同的静态文件，然后通过`PHPExcel`读取，再往里面塞数据，最后进行保存操作，可以达到一样的效果，并且可以节省大量的资源。\n\n### 10. 合并单元格导入问题\n\n> 在特殊的表格中，合并单元格普遍存在，而多个单元格合并成的一个单元格，只能`setValue()`一次，而我们如何判断合并单元格的具体行列呢？\n\n```php\n$range = $start_cell->getMergeRange();  // 通过合并单元格的开始单元格比如‘A1’，获取合并范围‘A1:A4’\n$cell->isInRange($range);    // 遍历之后每一个单元格便可通过isInRange()方法判断当前单元格是否在合并范围内\n```\n## 高级：特殊场景特殊手段\n\n### 1. 单元格文本格式数据处理 \n> 一般excel单元格中数据的格式为数据类型，而`PHPExcel`中的`getValue()`方法读取的也是数据类型，当把数据从数据类型改为文本类型后，在`PHPExcel`中读出来的是`PHPExcel_RichText`类型，`getValue()`读取返回`PHPExcel_RichText`是一个`object`类型（`PHPExcel_RichText`数据保存格式）；那如何读取这一类的数据呢？仔细查看读取出来的对象，不难发现有`getPlainText()`这样的方法可以读取文本类型数据，所以我们只要判断当当前数据为文本数据时用`getPlainText()`读取，一般数据用`getValue()`读取\n\n```php\nif ($cell->getValue() instanceof PHPExcel_RichText) {\n        $value = $cell->getValue();\n} else {\n        $value = $cell->getValue();\n}\n```\n> 参考资料\n>\n> http://www.cnblogs.com/DS-CzY/p/4955655.html\n> http://phpexcel.codeplex.com/discussions/34513\n\n### 2. 单元格数据算法处理\n> `excel`拥有强大的算法功能，一般算法格式为`=A3+A4`这类的，复杂的更多，如果使用`PHPExcel`提供的默认读取方法`getValue()`读取出来的结果则为字符串`=A3+A4`,好在`PHPExcel`也足够强大，提供了相应的接口：`getCalculatedValue()`，这个方法专门读取算法数据，但是我们不能将这个方法作为默认读取方法，因为这样可能会将一些本来要读成字符串的读成算法数据，而且`PHPExcel`没有将它作为默认读取方法的另一个重要原因就是算法方式读取很耗时间和性能，一般数据读取根本没有必要这样浪费资源，所以我们可以采用以下这种方式\n\n```php\nif (strstr($cell->getValue(), '=')) {   \n    // 判断如果cell内容以=号开头便默认为算法数据\n        $value = $cell->getCalculatedValue(); \n} else {\n        $value = $cell->getValue();\n}\n```\n\n### 3. 日期数据处理\n\n> 除了以上所说的文本数据和算法数据外，我还遇到过日期类型数据，比如`2016-12-28`输入到`excel`中，它会默认转换成`2016/12/28`，如果采用一般的`getValue()`方式读取也会读取到错误的数据，`PHPExcel`也提供了相应的接口`getFormattedValue()`,并提供了适配的识别方式`PHPExcel_Shared_Date::isDateTime($cell)`,所以代码就很好实现了\n\n```php\nif (PHPExcel_Shared_Date::isDateTime($cell)) {\n        $value = $cell->getFormattedValue(); \n} else {\n        $value = $cell->getValue();\n}\n```\n\n### 4. 读取方法封装\n> 针对`excel`各种数据类型，我们可以写一个函数，将原有的`getValue()`封装一下，这样以后就不用每次都判别一下数据类型了，目前我只遇到上面三种特殊格式，如果有新的，欢迎大家补充，封装函数如下\n\n```php\nfunction get_value_of_cell($cell) {\n        if (strstr($cell->getValue(), '=')) {   \n                    $value = $cell->getCalculatedValue(); \n                        } else if ($cell->getValue() instanceof PHPExcel_RichText) {\n                                    $value = $cell->getValue();\n                                        } else if (PHPExcel_Shared_Date::isDateTime($cell)) {\n                                                    $value = $cell->getFormattedValue(); \n                                                        } else {\n                                                                    $value = $cell->getValue();\n                                                                        }\n}\n```\n\n### 5. 导出文件在IE、360等浏览器中文件名中文乱码问题\n\n```php\n$filename = 'xxx导出表';\n// 判断如果是IE内核形式的浏览器采用urlencode处理文件名\nif (!preg_match(\"/Firefox/\", $_SERVER[\"HTTP_USER_AGENT\"])) {\n        $filename = urlencode($filename);\n}\n```\n\n> 未完待续。。。\n> 期待你的补充和优化\n","tags":["PHPExcel"],"categories":["tech"]},{"title":"Disk pull and plug record","url":"/2017/09/10/Disk-pull-and-plug-record/","content":"\n<center>![pull disk][10]</center>\n\n最近在做磁盘拔插后的`OSD`热恢复功能。在反复拔插盘的实践过程中，遇到了一个难题，就是时常会由于拔盘，然后再插盘后盘符发生了改变，`kernel`和`udev`接收不到任何`device`增加或删除的事件消息，\n由于我是基于`udev`监测磁盘的插拔，所以一旦感知不到的话，就无法进行相应的恢复操作，所以在此对拔盘的记录进行一些记录，并在大量操作中得出总结。\n\n<!--more-->\n\n## Operation Record\n\n`normal`: 表示正常情况，没有被拔\n\nenv | udev monitor | UI data | disk alias | device | lsblk | mount info | mount point \n:--:|:----:|:----:|:---:|:---:|:---:|:---:|:---:|\nnormal | - | /dev/sdg1 | osd4-data | /dev/sdg | exist | exist | /data/osd.1\nfirst pull | remove sdg | empty | remove | remove | remove | exist | exist, readerror\nfirst plug | add sdd | /dev/sdd1 | osd4-data | /dev/sdd | exist | exist | exist, readerror\nsecond pull | no remove | empty | osd4-data | /dev/sdd | not change | exist | exist, readerror\nsecond plug | All Not Change | - | - | - | - | - | - \nclear mount | - | - | exist | - | exist | remove | change style\nthird pull | remove sdd | empty | remove | remove | remove | remove | change style\nthird plug | add sdd | /dev/sdd1 | osd4-data | /dev/sdd | exist | exist | exist, readerror\n\n## Before pull\n<center>![before pull][1]</center>\n\n## First pull\n<center>![First pull][2]</center>\n\n## Read error\n<center>![Read error][9]</center>\n\n## First plug\n<center>![First plug][3]</center>\n\n## Second pull\n<center>![Second pull][4]</center>\n\n## Second plug\n<center>![Second plug][5]</center>\n\n## Clear mount info\n<center>![Clear mount info][6]</center>\n\n## Third plug udev monitor\n<center>![Third pull][7]</center>\n\n## Third plug \n<center>![Third plug][8]</center>\n\n## 注意：\n通过上面的表格和图片，如果拔盘前没有卸载`mount`链接，那么可以发现：\n\n* 下次插盘，磁盘名称不再是原来的名称，在当前排序最后的一个磁盘名往后追加，比如当前最后一块盘是`sdf`，那么就改名为`sdg`\n* `lsblk`显示`device`列表不会变化，`alias name`也是不会变化\n* 再次拔盘，`device`列表不会变化，`udev monitor`不会接收到任何设备的删除的事件信息\n* 再次插盘，`device`列表不会变化，`udev monitor`不会接收到任何设备的添加的事件信息\n\n如果清除了`mount`信息，插拔变得正常起来\n\n* `udev`可以正常接收设备添加和删除的信息\n* `lsblk`可以正常显示设备列表，会随着磁盘的拔盘而更新显示，`alias name`也是如此\n* 磁盘名称变回正常，即开机最原始的名称，例如上文的`sdd`\n\n所以针对一块硬盘的拔插只要做好即时清除`mount`就够了，那么这个时候拔另外插槽的一块盘呢？\n结果是：\n\n* 第一次拔盘： `udev`感知到（`remove` 当前磁盘名），`device`列表和`alias name`消失 \n* 第一次插盘： `udev`感知到（`add` **sdg**），`device`增加了`sdg`，`alias name`增加，没有变化\n* 第二次拔盘： 一切都没了反应\n* 清除`mount`信息后，插盘：无反应\n* 删除`alias name`： 无反应\n* 无论怎么样都没反应，也许除了开机或者这快盘插在别的插槽内\n\n## 总结\n\n### 问题1：\n\n目前来看，只要拔盘超过两块，一旦第二块盘的磁盘名称变了跟之前名称不一样，那么之后再怎么清理`mount`信息或者反复拔插都不会被`udev`感知到\n理论上来说，要实现硬盘热替换，那就得保证`udev`每次都能检测到硬盘的插入，拔盘检测倒不是那么重要，\n针对这种情况，目前没发现什么比较好的解决方案，唯一一种也是我当前采用的方案，在检测拔盘事件时会触发一个脚本，做拔的盘的`mount`信息的检查，如果存在`mount`信息，那么就`umount`掉，这是一种比较完美的场景，也就是说要保证每次插盘前，当前盘在系统中都不存在任何`mount`信息\n\n这种方案还是太完美化了，还需要大量的测试，期望能找出更能经得起推敲的方案\n\n### 问题2\n\n测试过程中偶然发现每次硬盘插入如果被`udev`感知到，也会执行大量的`udev rules`，其中包括创建设备，建立连接，建立连接这个事情就包括硬盘分区的`alias`，而我们感知到磁盘设备插入执行脚本在这之前，找了一系列的方案，都没能够使得让脚本在它`alias`之后再执行\n\n这里有一份官方的解释：http://www.reactivated.net/writing_udev_rules.html#external-run\n\n至于为什么脚本依赖这个别名，那是因为系统存的`data path`还是`journal path`都是以别名的形式，如果我们能够在别名之后执行脚本，那么理想情况下系统`db`之前存的别名会自动和插入的盘匹配建立连接，不需要我们再做过多的事情，否则我们得在每次创建`osd`的时候再存原始路径，记录分区信息等等，还有`/etc/fstab`存的都是别名，这样就导致有些操作无法进行，还有一些其他的矛盾暂时还没想到\n[1]: http://ovv1r40we.bkt.clouddn.com/before_pull.png\n[2]: http://ovv1r40we.bkt.clouddn.com/first_pull.png\n[3]: http://ovv1r40we.bkt.clouddn.com/first_plug.png\n[4]: http://ovv1r40we.bkt.clouddn.com/second_pull.png\n[5]: http://ovv1r40we.bkt.clouddn.com/second_pull.png\n[6]: http://ovv1r40we.bkt.clouddn.com/clear_mount.png\n[7]: http://ovv1r40we.bkt.clouddn.com/third_plug.png\n[8]: http://ovv1r40we.bkt.clouddn.com/third_plug_alias.png\n[9]: http://ovv1r40we.bkt.clouddn.com/readerror.png\n[10]: http://ow0mgad6r.bkt.clouddn.com/pull_device.png\n","tags":["Disk"],"categories":["tech"]},{"title":"Linux Udev","url":"/2017/09/10/Linux-Udev/","content":"<center>![udev][21]</center>\n\n在我入门`udev`，看着各种各样的资料觉得这个东西很高深的时候，突然瞄到一篇文章里面说道： 要树立一个信念：`udev`很简单，当时不以为然，现在深表赞同。看起来很高端很遥远的`Title`，比如`Linux Kernel`，比如软硬件交互，比如热插拔等等，其实掌握几个`rules`，然后再动手实践实践，对比着讲解，就能知道七七八八了，想要再深入，就多看看文档实现和内核源码，其实很多东西都是这样，了解了就很简单，没事了解一点就比别人多知道一些，共勉 \n\n<!--more-->\n## Udev 是什么\n`udev`是`linux kernel`的设备管理器，处理硬件的添加和删除，但它的功能远远不仅于此。比如`U`盘插入，电脑是如何即时的做出响应？耳机插入又是如何做到自动关闭外部音量？这些都跟`udev`有关。虽然`udev`很强大，功能很多，本来就针对`SCSI`硬盘设备的插拔做一些经验的分享。至于为什么我会研究到这个东西，是因为最近在做`ceph`相关的项目，需要实现一个类似热插拔的`feature`，懂的人应该很清楚，就是拔插硬盘后，`osd`自动恢复，主要应用于硬盘寿命即将到期，替换新盘的场景，不明白的同学也不要紧，因为本文主要讨论的是`udev`\n\n## Udev Rules\n`udev`管理各种各样的设备，比如`usb`,`scsi`,`cd`等等，为了区别设备类型，精确匹配，`udev`制定了一套特色的`rules`，为什么说特色呢？因为我觉得它用最简洁的语法满足了方方面面的需求\n\n这里推荐一些有用的`link`：\n\n* [UDEV Primer][3]  `udev`入门必读，可以快速将`udev`了解一番\n* [Writing udev rules][4]  经典文章，看完这个基本就能掌握`udev rules`\n* [Writing udev rules 修订版][5]  国内论坛对格式样式做了一些修改，有洁癖的可以看看\n* [Writing udev rules 译][6]  翻译版本，英文不好的可以中英文对比着看\n* [udev 中文手册][7]  这位金步国先生为开源事业做出了杰出的贡献，早前就看过他翻译的`Apache`的手册\n* [Writing udev rules and kernel examples][8]  看够了上面各种规则，来看看具体的例子吧\n* [Udev 详解][11]  文章如名，真的很详细\n* [Udev 使用方法][20]  一些特殊的技巧  \n\n大家看完上面的文章应该知道`rules`文件的位置和规则,下面我贴一些我实践中的代码和例子\n\n### Rules Example\n这是两条分别针对`SCSI`硬盘设备的添加和删除的`rules`，设备事件分别会触发相应的脚本：\n```\nKERNEL==\"sd[a-z]\", ACTION==\"add\", SUBSYSTEM==\"block\", RUN+=\"/usr/bin/python /root/test.py %k add\"\nKERNEL==\"sd[a-z]\", ACTION==\"remove\", SUBSYSTEM==\"block\", RUN+=\"/usr/bin/python /root/test.py %k remove\"\n```\n\n### Notice\n* 执行外部命令必须加上环境变量路径, 上面的这个也可以不加`/usr/bin/python`，但是必须在`py`脚本头部加上`shebang`：`#! /usr/bin/python`\n* `RUN`可以运行程序外的程序，而`PROGRAM`不是做这个事情的，而是为了生成之后需要的变量\n\n### Link\n* [hashtag and shebang][1]\n* [shebang][2]\n\n## Udevadm\n`udevadm`是一个`udev`的管理工具，可以用来获取设备信息(`info`)，监视和控制udev运行时的行为(`control`)，请求内核事件(`trigger`)，管理事件队列(`settle`)，以及提供简单的调试机制(`test`)。很实用，很好用！！！\n\n### 推荐 Link\n\n* [udevadm 中文手册][9]  很全，很基础 ~~\n* [udevadm command examples][10]  很多`udevadm`的命令可以借鉴，说不定以后可以用到呢？\n\n介绍几个我具体使用过的例子：\n### udevadm info\n可以从`udev`数据库中提取设备信息,此外，还可以从`sysfs`中提取设备的属性， 以帮助创建与此设备匹配的`udev`规则\n\n获取`/dev/sdb`的`path`信息\n```\nudevadm info -q path -n /dev/sdb\n```\n### udevadm test\n\n模拟向`udev`发送设备信息，并不会真的触发，**而是将触发后的过程信息打印出来**，对调试很有帮助\n\n``` \nudevadm test --action='add' `udevadm info -q path -n /dev/sdb`\n```\n\n**注意：** `test`不会真正触发事件，而`trigger`可以\n\n### udevadm trigger\n\n可以真正触发`udev`事件，但是不会真正改变硬件，只是触发`kernel`和`udev`的事件，会触发`udev rules`\n\n```\nudevadm trigger -v --action=add --sysname-match=sda\n```\n\n**注意：** \n\n* 不加`sysname-match`那么会触发所有设备，如果是`action=remove`，那么则会移除很多设备，甚至导致`sshd`服务停掉\n* 后面是`sda`而不是`/dev/sda`因为它是根据`pci`路径来定位`name`的，比如`sda`的路径是：\n```\n/sys/devices/pci0000:00/0000:00:10.0/host2/target2:0:0/2:0:0:0/block/sda\n```\n\n### udevadm control\n\n* 重载`udev rules`，对之后触发的新设备有效，对之前已经触发的无效\n```\nudevadm control --relaod-rules\n```\n* 更改`udev`日志等级为`info`，`udev`默认等级为`err`，可以在`/etc/udev/udev.conf`中查看，日志具体信息可以在`syslog`中查看\n```\nudevadm control --log-priority=info\n```\n\n## More about udev\n`udev`还有很多有意思的地方，如果想要更加深入的学习，那么除了熟练地掌握`rules`等技巧，还要对其实现原理有了解，这就得多看文档，多看源码了，建议大家有条件的情况下多看源码，多看原始的东西，因为经过别人的总结就可能会变味，相互对比，不要一味依赖别人总结的产物\n\n* [Linux 自动挂载usb设备 小例子][12]  如何在`usb`设备插入后自动挂载？\n* [udev使用笔记][13]  这篇文章里面那张图片不错\n* [写个程序检测我们的设备插拔][14]  模仿内核源码简单地实现一个设备插拔的检测\n* [linux下热插拔事件的产生是怎样通知到用户空间][15]  事件传递过程，`udev`源码解析\n* [热插拔的工作原理 hotplug机制和udev][16]  `udev`原理讲解\n* [Uevent 上报event事件给上层的详细讲解][17]  `uevent`源码讲解\n* [linux内核空间和用户空间的是怎样区别的，如何交互，如何从用户空间进入内核空间][18]  内核空间和用户空间的一些剖析\n* [Netlink实现热拔插监控 ][19]  消息传输用的是什么？`Netlink`是如何做到的\n\n[1]: http://www.cnblogs.com/daishuguang/p/4192703.html\n[2]: http://smilejay.com/2012/03/linux_shebang/\n[3]: http://webpages.charter.net/decibelshelp/LinuxHelp_UDEVPrimer.html\n[4]: http://www.reactivated.net/writing_udev_rules.html\n[5]: http://www.lai18.com/content/1612267.html\n[6]: http://blog.csdn.net/nhczp/article/details/4099647\n[7]: http://www.jinbuguo.com/systemd/udev.html#\n[8]: http://wiki.dreamrunner.org/public_html/Embedded-System/kernel/udev-rules.html\n[9]: http://www.jinbuguo.com/systemd/udevadm.html\n[10]: http://fibrevillage.com/sysadmin/93-udevadm-usage-examples\n[11]: http://blog.csdn.net/lqrensn/article/details/8097288\n[12]: https://my.oschina.net/bwhite/blog/808995\n[13]: http://www.jianshu.com/p/dd6cecd7755a\n[14]: http://blog.csdn.net/fjb2080/article/details/5009791\n[15]: http://www.itnose.net/detail/6691523.html\n[16]: http://blog.csdn.net/bingqingsuimeng/article/details/7950639\n[17]: http://blog.csdn.net/sunweizhong1024/article/details/7928530\n[18]: http://blog.csdn.net/bingqingsuimeng/article/details/7924756\n[19]: http://blog.chinaunix.net/uid-24943863-id-3223000.html\n[20]: http://www.cnblogs.com/qigaohua/p/6673930.html\n[21]: http://ow0mgad6r.bkt.clouddn.com/night_king800x600_1x.jpg\n","tags":["Udev"],"categories":["tech"]},{"title":"Magicloud Route","url":"/2017/09/10/Magicloud-Route/","content":"\n<center>![router][3]</center>\n\n`Magicloud`是我目前负责的一个基于`ceph`的分布式存储项目，为了方便刚刚参与项目的成员熟悉整个项目的路由并能够快速着手，在这里对整个项目的路由梳理了一下，以图形为主，凸出整个流程的走向\n\n<!--more-->\n\n`Magicloud`目前有两种方式进行前后端通信，一种是`Ajax`,一种是`Restful Api`\n\n### Ajax\n\n以前台`UI`的主机角色获取所有`Osd`列表为例：\n\n<center>![image][1]</center>\n\n### Restful API\n\n<center>![image][2]</center>\n\n\n[1]: http://on-img.com/chart_image/599851a6e4b0b7b347e0e378.png\n[2]: http://on-img.com/chart_image/59994a6ae4b06df7265d5447.png\n[3]: http://ow0mgad6r.bkt.clouddn.com/hardware_family_1x.png\n","tags":["Route"],"categories":["tech"]},{"title":"Osd Enable and Disable","url":"/2017/09/10/Osd-Enable-and-Disable/","content":"\n<center>![osd][1]</center>\n\n对项目中`osd`的`enable`和`disable`的代码流程的总结\n\n<!--more-->\n\n## Osd Disable\n\n1.```\nstop_ezs3_service: stop_ezs3_service\n```\n\n2.```\nstop osd\n```\n\n3.`disable osd`\n- load config: /etc/mcs3/storage.conf(存储卷的配置信息，即`osd`的配置信息)\n- service ganglia-monitor stop' returns 'Stopping Ganglia Monitor Daemon: gmond.\n- get osd id by osd name \n- stop osd\n    - ezs3-ha service_ceph stop osd0\n    - kill -9 xxx\n    - ceph osd down 0, ceph osd out 0, ceph osd rm 0\n- disable osd\n- umount:\n``` \n\tmount_point = \"/data/osd.{}\".format(self.get_osd_id())\n\tif os.path.ismount(mount_point):\n\t\tumount -f -l /data/osd.0 ?\n    ......\n    sed -i '\\@/data/osd.0@d' /etc/fstab\n```\n\t\n4.```\ndelete part_map\n```\n\n5.```\nset partition map\n```\n\n6.```\ncl.node_management.osd_disabled\n```\n\n\n## Osd Enable\n- prepare enable osd\n- set public interace,cluster interface(if cluster interface is true) and save in ceph.conf (osd, interface等信息存放文件：/etc/ceph/ceph.conf)\n- consolidate_raid_configure\n  - 查看池信息：/opt/MegaRAID/MegaCli/MegaCli64 -AdpBbuCMD -Aall |grep Exit |tr -d \"\\n\"\n  - a series of megaci command\n- 记录 osd 的状态： role.set(OSD, RoleState.ENABLING)\n- enable osd (@monlock ?)\n  - update task info(有空看下代码，如何实现ajax轮询的)\n  - get_partition_map:\n\n```\n  try: \n      kvstore.get('partition_map', timeout, timeout!=0) \n  catch: \n      rados -p .ezs3 get partition_map -\n```\n  - stop ezs3 service\n  - 创建桶节点并且建立link\n  - service ganglia-monitor stop\n\n```\nif not host_osd_enabled: \n    ceph osd crush add-bucket {} host\".format(crush_host_bucket)\n    ceph osd crush link {} pool=default\".format(crush_host_bucket)\n```\n\n- StorageVolume\n  - enable_osd\n\t- ceph osd create\n\t- mount: mount -o noatime,user_xattr /dev/disk/by-partlabel/osd1-data /data/osd.0\n\t- add osd and save\n\t- ceph mon getmap -o /tmp/monmap（二进制文件）\n\t- ceph-osd -i {osd_id} --monmap /tmp/monmap --mkfs --mkjournal\n\t- start osd: `ezs3-ha service_ceph start osd0`\n\t- ceph osd crush add {osd_id} 0 pool=default host={crush_host_bucket}\n\t- set osd uuid and osd post  stop command\n\n\t\n\n\n[1]: http://ow0mgad6r.bkt.clouddn.com/circles_js_039_dribbble.gif\n","tags":["Osd"],"categories":["tech"]},{"title":"Disk Mon Daemon","url":"/2017/09/10/Disk-Mon-Daemon/","content":"\n<center>![daemon][6]</center>\n\n\n最近在做监控`SSD`磁盘健康状态这个需求的时候，发现项目中专门针对磁盘写了一个`daemon`，之前对`daemon`只是表面上的了解，所以这次正好深入学习下,了解一下这样做的原因和好处以及如何在以后的工作中熟练运用`daemon`\n<!--more-->\n\n## Daemon相关知识了解\n* [Daemon Definition][1]\n* [Creating a daemon in Linux][2]\n* [Unix Daemon Server Programming][3]\n* [Linux Daemon Writing HOWTO][4]\n* [守护进程详解及创建，daemon()使用][5]\n\n## MCS3DiskMonitor Daemon使用\n1. `pid`文件路径： `/var/run/mcs3-smart-monitor.pid`\n2. `daemon`所在位置: `/etc/init.d/`\n3. `log`打印位置：`/var/log/mccloudstor/mcs3-disk-mon.log`\n4. 操作方式：\n\n* `service mcs3-smart-monitor start`\n* `service mcs3-smart-monitor stop`\n* `service mcs3-smart-monitor restart`\n\n> 改动`daemon`相关代码，需`restart daemon`才可以生效\n\n## MCS3DiskMonitor Daemon process\n**1.** 单位时间避免邮件重复发送： 通过声明一个全局变量`send_email_time`, 记录当前时间的一个小时的时间，一旦发送邮件立即更新该变量为当前时间\n\n```\nsent_mail_time = datetime.datetime.now() - datetime.timedelta(0,3600) # 1 hour\n\ndef send_disk_status_notification(disk_status):\n    global sent_mail_time\n    now = datetime.datetime.now()\n    if now < sent_mail_time + datetime.timedelta(0,3600):\n        logger.info(\"Notification sent within one hour before. System will not send again.\")\n        return\n            host = socket.gethostname()\n    title = \"Host {} Disk Health Status Warning!\".format(host)\n    message = disk_status\n    try:\n        utils.send_notification(title, message)\n        sent_mail_time = datetime.datetime.now()\n    except Exception as e:\n        logger.error(str(e))\n```\n\n**2.** 执行命令报错影响其他代码的执行，有以下几处命令执行：\n \n`line48`:\n```\noutput = utils.do_cmd(\"zpool status|grep state\", force=True)\n```\n`line71~75`\n```\n    VDSTATE1 = do_cmd(MEGACLI_BIN + \" -cfgdsply -aALL -NoLog | grep State\") \n    VDSTATE2 = do_cmd(MEGACLI_BIN + \" -AdpAllInfo -aALL -NoLog | grep Degraded\")\n    VDSTATE3 = do_cmd(MEGACLI_BIN + \" -AdpAllInfo -aALL -NoLog | grep Offline\")\n    PDSTATE1 = do_cmd(MEGACLI_BIN + \" -AdpAllInfo -aALL -NoLog | grep \\\"Critical Disks\\\"\")\n    PDSTATE2 = do_cmd(MEGACLI_BIN + \" -AdpAllInfo -aALL -NoLog | grep \\\"Failed Disks\\\"\")\n```\n> 暂时处理方法：在这些方法的外面单独包一层`try catch`\n\n**3.** `SSD Disk`信息获取\n\n* 获取健康寿命\n\n```\nsmartctl -a -d megaraid,{} {}|grep 'Media_Wearout_Indicator'\n```\n* 获取磁盘序列号\n\n```\nsmartctl -a -d megaraid,{} {}|grep 'Serial Number'\n```\n\n* 判断是否为SSD Disk：如果为`1`则为机械硬盘，如果为`0`则为`SSD Disk`\n\n```\ncat /sys/block/{}/queue/rotational  // param such as sda or sdb etc\n```\n\n[1]: http://www.linfo.org/daemon.html\n[2]: https://stackoverflow.com/questions/17954432/creating-a-daemon-in-linux\n[3]: http://www.enderunix.org/docs/eng/daemon.php\n[4]: http://www.netzmafia.de/skripten/unix/linux-daemon-howto.html\n[5]: http://www.cnblogs.com/mickole/p/3188321.html\n[6]: http://ow0mgad6r.bkt.clouddn.com/demonabel.gif\n","tags":["Daemon"],"categories":["tech"]},{"title":"Network Down Notification","url":"/2017/09/10/network-down-notification/","content":"\n<center>![network][3]</center>\n\n项目中要做一个`network` `down`了之后给用户发送邮件提醒的功能，这里面涉及到的问题有：\n* 如何监测 network 状态\n* network down之后，如何发送邮件\n* public network 和 storage network的用处和场景\n\n<!--more-->\n\n## get role interfaces\n\n## get interfaces\n\n## get interface info\n\n### 获取 MAC 和 busid \n\n```\nsyspath = os.path.join(\"/sys/class/net/\", interface)  // interface such as 'eth0'\nmac = linecache.getline(os.path.join(syspath, \"address\"), 1)[:-1].upper()\nbuspath = os.path.realpath(syspath)\nbus_id = os.path.basename(os.path.dirname(os.path.dirname(buspath)))\n```\n\n* MAC: 直接在`syspath`目录下读取`address`文件\n* 假设为`eth0`,查看`eth0`目录可见该目录被建立了软连接，并不是真实地址，所以需要取出它的真实地址，这个需要使用`python`中的`os.path.realpath()`处理获得`0000:03:00.0`,作为下一步`lspci`的参数\n\n```\nroot@ceph133:/sys/class/net# ll eth0\nlrwxrwxrwx 1 root root 0  8月  8 01:26 eth0 -> ../../devices/pci0000:00/0000:00:15.0/0000:03:00.0/net/eth0/\n```\n\n### 获取网卡信息\n\n`lspci -s`后面的参数为`pci`设备的地址，也叫`pci寻址`，这个地址由总线编号、插槽编号和功能块编号信息组成\n```\nlspci -m -s xxx // 这边的参数就是上面的bus_id\n```\n\n> 具体`lspci`信息请参照：\n> [lspci命令详解][1]\n> [LSPCI命令详解分析][2]\n\n### 获取网卡状态\n\n通过`ethtool`工具获取网卡状态，就是看`Link detected`是否为`yes`，`yes`表示已激活\n\n```\n/sbin/ethtool eth0 | grep 'Link detected: yes' | wc -l\n```\n\n## bond filter\n\n## Network down notification\n**1.** 目前无论是`storage`还是`public`网卡只要`down`其中一个都无法发送`email`:\n\n* public: `visit foreign network and connect smtp server`\n* storage: `connect ceph rados to get notification info, such as send account and smtp server etc`\n所以只能`monitor`除这两个以外的网卡\n\n**2.** `Python`\n\n* `log`打印的文件取决于当前文件进程的初始化`log level`\n* `logger`: `handler`, `formatter`, `filter`\n* `dictdefault`\n\n\n  [1]: http://coolnull.com/2246.html\n  [2]: http://blog.csdn.net/xiadidi/article/details/18408169\n  [3]: http://ow0mgad6r.bkt.clouddn.com/network.png\n","tags":["Notification"],"categories":["tech"]},{"title":"Python Oracle","url":"/2017/09/10/Python-Oracle/","content":"<center>![oracle][3]</center>\n\n近期在做`Intel`的测试，需要监测各种故障情况下的热恢复或者热迁移等功能，比如拔线测试，拔盘测试，断电测试等，来检验分布式的稳定性和灵活性，以`Oracle`为例，需要一直向数据库中写数据，然后在发生故障时，通过观察插入数据的情况来判断是否能够处理异常情况，所以我需要写一个脚本，能够做到通过`python`自动连接`oracle`数据库并自动插入数据。\n\n<!--more-->\n\n> 当前环境：Linux Centos 7\n\n### 1. 下载安装包cx_Oracle\n\n由于我本地`Python`版本是`2.7`,所以选择是`2.7`版本\n\n```\nwget https://pypi.python.org/packages/e1/18/00987c6a9af9568ee87d1fcba877407684a3f1b87515e5eb82d5d5acb9ff/cx_Oracle-6.0rc1-py27-1.x86_64.rpm#md5=ff8f5cce07bd5ec8ed3ce5c79d451474\n```\n\n参考:\n\n> - [python-cx_Oracle][1]\n> - [安装包列表][2]\n\n\n[1]: https://oracle.github.io/python-cx_Oracle/\n[2]: https://pypi.python.org/pypi/cx_Oracle/5.3\n\n### 2. 安装cx_Oracle\n\n- 安装：\n\n```\nrpm -ivh cx_Oracle-6.0rc1-py27-1.x86_64.rpm\n```\n\n- 查看当前`python`引入模块库的路径\n\n```\n[root ~]# python\nPython 2.7.5 (default, Nov  6 2016, 00:28:07) \n[GCC 4.8.5 20150623 (Red Hat 4.8.5-11)] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import sys\n>>> print sys.path\n['', '/usr/lib/python2.7/site-packages/AliyunUtil-0.0.1-py2.7.egg', '/usr/lib/python2.7/site-packages/cloud_init-0.7.6-py2.7.egg', '/usr/lib64/python27.zip', '/usr/lib64/python2.7', '/usr/lib64/python2.7/plat-linux2', '/usr/lib64/python2.7/lib-tk', '/usr/lib64/python2.7/lib-old', '/usr/lib64/python2.7/lib-dynload', '/usr/lib64/python2.7/site-packages', '/usr/lib/python2.7/site-packages']\n```\n\n- 检查安装路径，如果`cx_Oracle.so`文件不在以上`python`引入路径内需要将该文件拷贝到以上`python`引入路径,所以我这里不需要进行拷贝操作\n\n```\n[root ~]# rpm -qa | grep cx_Oracle | xargs rpm -ql\n/usr/lib64/python2.7/site-packages/cx_Oracle-6.0rc1-py2.7.egg-info\n/usr/lib64/python2.7/site-packages/cx_Oracle-6.0rc1-py2.7.egg-info/PKG-INFO\n/usr/lib64/python2.7/site-packages/cx_Oracle-6.0rc1-py2.7.egg-info/SOURCES.txt\n/usr/lib64/python2.7/site-packages/cx_Oracle-6.0rc1-py2.7.egg-info/dependency_links.txt\n/usr/lib64/python2.7/site-packages/cx_Oracle-6.0rc1-py2.7.egg-info/top_level.txt\n/usr/lib64/python2.7/site-packages/cx_Oracle.so\n```\n\n### 3. 下载 Oracle Library\n\n由于`Oracle`官网下载东西存在`Auth`认证，所以简单点就点击选中的`rpm`包保存在`windows`上，然后上传到`linux`上即可\n\n**注意：**\n> - 下载的版本要和连接的`Oracle`基本一致，我需要连接的`oracle`版本是`11.2`，所以我下载的是`oracle-instantclient11.2-basic-11.2.0.3.0-1.x86_64.rpm`\n> - **操作系统要和之前下载的`cx_Oracle`要一致**，这很重要！！！我在这个上面栽了跟头，花了比较多的时间。。。所以我需要下载`64`位的\n> - 在`Oracle`官网下载东西你得先勾选`Accept License Agreement`，否则你下载不了\n> - 其次你得有`Oracle`的账号\n\n### 4. 安装 Oracle Library\n\n```\nrpm -ivh oracle-instantclient11.2-basic-11.2.0.3.0-1.x86_64.rpm\n```\n\n### 5. 配置环境变量\n\n- **修改`Oracle`安装路径**\n\n将`client64`改为`client`，至于为什么要改暂时还不清楚，只知道不改的话会报错`Oracle Client library cannot be loaded: libclntsh.so: cannot open shared object file: No such file or directory`\n\n```\ncd /usr/lib/oracle/11.2/\nmv client64 client\n```\n\n- 打开`/etc/profile`,追加环境变量路径\n\n```\nvim /etc/profile\n```\n\n- 配置环境变量\n\n```\n// 查看Oracle安装路径\n[root@iZbp180vortqapb7yf8217Z ~]# rpm -qa | grep oracle | xargs rpm -ql\n/usr/lib/oracle/11.2/client64/bin/adrci\n/usr/lib/oracle/11.2/client64/bin/genezi\n/usr/lib/oracle/11.2/client64/lib/libclntsh.so.11.1\n/usr/lib/oracle/11.2/client64/lib/libnnz11.so\n/usr/lib/oracle/11.2/client64/lib/libocci.so.11.1\n/usr/lib/oracle/11.2/client64/lib/libociei.so\n/usr/lib/oracle/11.2/client64/lib/libocijdbc11.so\n/usr/lib/oracle/11.2/client64/lib/ojdbc5.jar\n/usr/lib/oracle/11.2/client64/lib/ojdbc6.jar\n/usr/lib/oracle/11.2/client64/lib/xstreams.jar\n// 追加ORACLE_HOME环境变量路径\nexport ORACLE_HOME=/usr/lib/oracle/11.2/client64\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ORACLE_HOME/lib\n```\n\n- 生效配置\n\n```\nsource ~/.bashrc\n```\n\n### 6. 检查是否可以引入`cx_Oracle`\n\n`import`没有报错，说明之前的辛苦没有白费\n\n```\n[root client64]# python\nPython 2.7.5 (default, Nov  6 2016, 00:28:07) \n[GCC 4.8.5 20150623 (Red Hat 4.8.5-11)] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import cx_Oracle\n>>>\n```\n\n### 7. 连接 Oracle\n\n一个插入10条数据的Python脚本demo：\n\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\nimport cx_Oracle\ncon = cx_Oracle.connect('test/test@xxx.xxx.xxx.xxx/xe')\ncur = con.cursor()\nfor n in range(1, 10):\n    cur.execute('insert into test(id, name) values (1, n);')\ncur.close()\ncon.close()\n```\n[3]: http://ow0mgad6r.bkt.clouddn.com/oracle_2.png\n","tags":["Python"],"categories":["teach"]},{"title":"Oracle Linux And Oracle Database 11g R2 Intsallation","url":"/2017/09/10/oracle_install/","content":"\n<center>![oralce][9]</center>\n\n最近工作中用到了`Oracle`作为`Intel`测试的数据库，在装`Oracle Linux`和`Oracle Database 11g R2`折腾了很久，这篇文章就这两点对大家分享一些我安装过程中遇到的问题和注意点，`rac`暂时还未配置，稍后找时间补上\n\n<!--more-->\n\n> 友情提醒： 本文参照`link`较多，请细心并且耐心地进行每一步操作\n### Resource Link\n> * [Oracle Linux ISO][1]\n> * [Linux Oracle Database 11g R2][2] \n> * [Windows Oracle Database 11g R2][3] \n\n### Oracle Linux Installation\n**参考列表：**\n\n  * [oracle linux 6.5 安装 oracle 11gR2图文详解][4]\n  * [Oracle 11g R2（自己整理的Word，带详细RAC配置）][5]\n\n> 以下操作步骤基本是按上面两条`link`走的，有一些地方不一样或者是没必要的我会在下面详细讲解，我装的时候以`link1`为主线，然后参照`link2`的`word`文档进行，没有特殊标记的一般都是根据`link1`操作，大家也可以这样操作，可以少遇一些坑，节省一些时间~~~\n\n**注意点：**\n  \n  * `Base server`这一步很关键\n    - 勾选`Oracle Linux Server`, `Resilient Storage`和 `Scalable Filesystem Support`（参照`link2`）\n    - 勾选`Customize Now`，这一步依然非常关键，只有勾选了才可以装一些`Oracle Linux`需要的套件\n    - 需要手动添加安装的套件（系统默认勾选的不要删掉，这边的操作只添加勾选）：\n      * `Base System`：`Compatibility libraries`\n      * `Servers`: `System administration tools`\n      * `Desktops`: `Desktop`、`Desktop Platform`、`Fonts`、`General Purpose Desktop`、`Graphical Administration Tools`、`Input Methods`、`X Window System`\n      * `Development`: `Additional Development`、`Development Tools`\n      * `Appilication`: `Internet Browser`\n  * 安装应该是`1390`个包，装好直接`reboot`\n  * 这时候创建普通用户的时候，千万不要创建`oracle`用户，否则之后会有很多麻烦\n\n### Oracle Linux Configuration（important and complicated）\n**下面讲的主要是和两个文档不同的地方（依然以`link1`为主线）：**\n\n**1.** `selinux`需要`dsiable`\n\n**2.** `/etc/sysctl.conf`参照`link2`，`kernel.shmmax = 536870912`（这行参照`link2`）\n\n**3.** `/etc/security/limits.conf`\n```\n  oracle soft nproc 16384\n  oracle hard nproc 16384\n  oracle soft nofile 4096\n  oracle hard nofile 65536\n  oracle soft stack 10240\n```\n\n**4.** `oracle linux 6.5`光盘下载包（我是通过`yum`安装,没有安装的大部分都是系统已经安装了，少部分是没必要安装）\n* 需要安装：\n  * `ksh`\n  * `libaio-devel.i686`\n  * `libaio-devel.x86_64`\n  * `libaio.i686`\n  * `libstdc++.i686`\n  * `libstdc++-4.4.7-18.el6.i686`\n  * `compat-libstdc++-33.i686`\n* 不需要安装：\n  * `numactl-devel-2*x86_64*`\n\n> 由于我本地的是`libstdc++-4.4.7-4.el6.x86_64`，而安装的是`libstdc++-4.4.7-18.el6.i686`，版本不匹配会造成`yum`报错，而这个库作为众多库的依赖还不能删除，所以只能强行升级：`yum install libstdc++-4.4.7-18.el6.i686`，然后再安装`i686`文件\n\n**5.** 路径、权限与环境变量配置\n这一步参照: [Automating Database Startup and Shutdown on Linux][6]\n\n**附上脚本和`~/.bash_profile`:**\n\n`start_all.sh`：\n\n```\n#!/bin/bash\n. /home/oracle/scripts/setEnv.sh\n\nexport ORAENV_ASK=NO\n. oraenv\nexport ORAENV_ASK=YES\n\ndbstart $ORACLE_HOME\n```\n\n`stop_all.sh`：\n\n```\n#!/bin/bash\n. /home/oracle/scripts/setEnv.sh\n\nexport ORAENV_ASK=NO\n. oraenv\nexport ORAENV_ASK=YES\n\ndbshut $ORACLE_HOME\n```\n\n`setenv.sh`：\n\n```\n# Oracle Settings\nexport TMP=/tmp\nexport TMPDIR=$TMP\n\nexport ORACLE_HOSTNAME=tonydb.localdomain\nexport ORACLE_UNQNAME=sampledb\nexport ORACLE_BASE=/home/oracle/app/oracle\nexport ORACLE_HOME=$ORACLE_BASE/product/11.2.0/dbhome_1\nexport ORACLE_SID=sampledb\n\nexport PATH=/usr/sbin:/usr/local/bin:$PATH\nexport PATH=$ORACLE_HOME/bin:$PATH\n\nexport LD_LIBRARY_PATH=$ORACLE_HOME/lib:/lib:/usr/lib\nexport CLASSPATH=$ORACLE_HOME/jlib:$ORACLE_HOME/rdbms/jlib\n```\n\n`~/.bash_profile`最后一行追加： \n\n```\n. /home/oracle/scripts/setenv.sh\n```\n\n**6.** 安装`FTP`并上传`zip`文件（这一步有需求就执行，我是通过`windows`传输到`linux`上）\n> 安装包在页面最上方`Resource Link`的第二个`link`，有两个`zip`包，都是需要的，这就是`Oracle Database 11g R2`的包，下面就开始安装数据库了，离成功也就不远了\n\n### Oracle Database 11g R2 Installation\n**参照：** [Oracle Database 11g Release 2 Installation on RHEL/CentOS 6.x/5.x/4.x][7]，以这个`link`的步骤为主，`link1`和`link2`为辅\n\n1. 如果出现`next button`闪退的现象，进入`preference`里面调节屏幕分辨率即可\n\n2. `check`时候报错，如果你在上面安装了那么就`ignore`吧，因为这些包都安装了，只不过版本比它`check`的高：\n```\nlibaio-0.3.105\ncompat-libstdc++-33-3.2.3\nlibaio-devel-0.3.105\nlibgcc-3.4.6\nlibstdc++-3.4.6\nunixODBC-2.2.11\nunixODBC-2.2.11\nunixODBC-devel-2.2.11\nunixODBC-devel-2.2.11\npdksh-5.2.14\n```\n\n### Oracle Listener Configuration\n**参照：** [Oracle Listener][8]\n> 最后`test`不成功也没关系，先保存设置进行下一步，这边把`lsnrcetl`起起来就可以了，先不要进入`oracle`命令行，需要等下一步创建了数据库再进行`startup`等操作\n\n### 创建数据库\n> `dbca`进入创建向导，填写正确的`sid`，`sid`不用填`ORCL`,就用同步生成的就好，不同的数据库可以拥有不同的`sid`，按照默认的配置不断地`next`就好\n\n* 安装后的默认数据库为orcl，如需创建新的数据库\n  - 使用辅助工具(Linux UI mode)\n    > root@oracledb: xhost local:oracledb\n    > root@oracledb: su - oracle\n    > oracle@oracledb: dbca\n  - 使用em管理WebUI\n* 创建表空间\n  - 使用sqlplus\n    > su - oracle (Windows下此步骤省略)\n    > sqlplus / as sysdba\n    > create tablespace test_space datafile '/opt/oracle/oradata/test_data.dbf' size 500M\n  - 使用em管理WebUI\n* 创建用户    \n  - 使用sqlplus\n    > su - oracle (Windows下此步骤省略)\n    > sqlplus / as sysdba\n    > create user test identified by test default tablespace test_space;\n  - 使用em管理WebUI\n* 授权用户权限\n  - 使用sqlplus\n    > su - oracle (Windows下此步骤省略)\n    > sqlplus / as sysdba\n    > grant connect, resource to test;\n  - 使用em管理WebUI\n* 授权DBA权限（RMAN需要dba权限来运行）\n  - 使用sqlplus\n    > su - oracle (Windows下此步骤省略)\n    > sqlplus / as sysdba\n    > grant sysdba to test;\n  - 使用em管理WebUI\n* 数据库启动/关闭\n  * 切换用户\n    > root@oracledb: su - oracle\n  * 启动监听\n    > lsnrctl start\n  * 启动实例\n    > su - oracle (Windows下此步骤省略)\n    > sqlplus /nolog\n    > conn /as sysdba\n    > startup\n  * 关闭实例\n    > su - oracle (Windows下此步骤省略)\n    > sqlplus /nolog\n    > conn /as sysdba\n    > shutdown immediate\n    > exit\n  * 关闭监听\n    > lsnrctl stop\n* 归档日志模式启动/关闭\n  * 启动归档日志模式\n    > sqlplus /as sysdba \n    > shutdown immediate\n    > startup mount\n    > alter database archivelog\n    > alter database open\n  * 关闭归档日志模式\n    > sqlplus /as sysdba \n    > shutdown immediate\n    > startup mount\n    > alter database noarchivelog\n    > alter database open\n\n作者： Tony\n\n日期： 2017/06/26\n\n  [1]: https://pan.baidu.com/s/1pL7ENn9\n  [2]: https://pan.baidu.com/s/1qYufAQo\n  [3]: https://pan.baidu.com/s/1kV3JpCr\n  [4]: https://wenku.baidu.com/view/afd5ca9e5022aaea998f0fa2.html\n  [5]: https://pan.baidu.com/s/1miDQEoC\n  [6]: https://oracle-base.com/articles/linux/automating-database-startup-and-shutdown-on-linux\n  [7]: https://www.tecmint.com/oracle-database-11g-release-2-installation-in-linux/\n  [8]: http://blog.csdn.net/haiross/article/details/13613931\n  [9]: http://ow0mgad6r.bkt.clouddn.com/oracle_1.png\n\n\n\n\n\n","tags":["Oracle 11g R2"],"categories":["tech"]},{"title":"Moodle Local Plugin","url":"/2017/09/09/Moodle-Local-Plugin/","content":"\n<center>![moodle][8]</center>\n\n`Local`插件在`Moodle`中相比于其他插件算是比较容易上手的一个插件，`Local`插件中前后台分离，不用遨游在杂糅前后端的代码里。学会`Local`插件是上手其他插件的前提，其实一旦学会`Local`插件也会发现其他插件不过是它的一种变种形式罢了，只要举一反三就能很快掌握。\n\n<!--more-->\n\n## Moodle Local 插件架构\n<center>![image][2]</center>\n\n## 前端\n### [Template][3]\n服务器配置了相应的`url`，所以每个插件的加载首页都是`index.php`，但是并不意味着页面的代码就在`index.php`中，首先在`index.php`中调用`renderer.php` 中相应的页面渲染方法，例如  `render_index_page($page) ` 方法：\n\n```\npublic function render_index_page($page) {\n$data = $page->export_for_template($this);\n    render_from_template('local_xxx/index', $data)\n}\n```\n\n* 在这个方法中，首先调用了`index_page`这个类中的 `export_for_template` 方法，获得页面静态加载需要的数据，例如`mustache`模板需要的数据，`data`数组的索引与模板名称一一对应，例如`mustache`文件中若有 &#123;&#123;`#user`&#125;&#125;`hello!`&#123;&#123;`/user`&#125;&#125;，那么对应 class 一定存在 `$data['user'] = xxxx`；\n* 以 `render_from_template('local_xxx/index', $data)` 为例， `local_xxx/index`，`template`目录下必定有文件名为`index.mustache`的文件，这是`moodle` 封装好的命名规范，而`mustache`文件就是页面展示的代码所在了；\n* 通过&#123;&#123;`#js`&#125;&#125;`require xxx`&#123;&#123;`/js`&#125;&#125;引入对应的`JavaScript`文件；\n\n\n### [CSS][4]\n每个 local 插件中都存在一个`style.css`这样的一个`css`样式文件，系统运行时，会将每个模块的`css`文件内容合并到一起，所以如果有两个名称一样的`css`，则会发生覆盖的现象，所以建议起名字统一在最前面加上当前的插件名称，要注意的是，每次新增、修改或者删除`css`文件内容后，如若需要立即查看效果，必要以`admin`角色进入系统，然后**清空缓存**；\n\n### [JavaScript][5] \n目前系统中的`js`是基于`RequireJS`框架，遵循`AMD`开发规范，利用`Grunt`构建的。`amd`目录下有`src`目录和`build`目录，`src`下的`xxx.js`是供开发时编写调试使用，而`build`目录下的`min.js`则是网站实际运行时所使用的`js`文件，经过压缩可以大幅度提升运行速度。所以每次修改`js`完毕后，提交代码切勿忘记生成对应的`min.js`文件并提供，生成命令为 `grunt uglify`；\n\n## 后端\n### [db][6]\n1. access.php\n主要负责记录权限的配置；\n\n2. service.php\n负责接收`ajax`提交，配置对应的后台`API`的类名、路径 和方法名等信息，并将对应的`ajax`方法存入数据库中；\n\n3. install.xml\n用于安装系统时表结构的对应生成；\n\n4. install.php\n用于安装系统时数据库的缺省数据的提供；\n\n5.  upgrade.php [开发规范][7]\n用于系统表结构变化等版本升级事项的实现，由于生产环境中客户已有大量数据存在于数据库中，所以这时候不能采取重装系统的方式更改表结构或者更改数据库等操作，这时候就得借助`upgrade.php`平滑升级。\n\n### 后台 API\n1. externallib.php\n负责编写`service.php`中`ajax`提交方法对应的后台方法，并调用`lib.php`中的`API`实现；\n\n2. lib.php\n负责方法的具体实现，代码与数据库的数据交互\n\n3. lang/en/xxx.php 和 lang/zh_cn/xxx.php\n\n`en`目录下的表示英文翻译语言文件，`zh_cn`目录下的表示中文翻译语言文件，具体调用方法为： \n\n* `php`中： `get_string(字符串名, 插件名)`\n* `mustache`中： &#123;&#123;`#str`&#125;&#125;`字符串名, 插件名`&#123;&#123;`/str`&#125;&#125;\n\n作者：Tony\n2017年02月28日\n\n[1]: https://www.processon.com/view/link/58b50108e4b02ba7e0885137\n[2]: http://on-img.com/chart_image/58b5173ce4b01d80b64d335e.png \n[3]: https://docs.moodle.org/dev/Templates\n[4]: https://docs.moodle.org/dev/CSS\n[5]: https://docs.moodle.org/dev/Javascript_Modules\n[6]: https://docs.moodle.org/dev/Data_definition_API\n[7]: https://note.youdao.com/share/?token=18D5479D0AFA4286A46EACE741345DF5&gid=29389535\n[8]: http://ow0mgad6r.bkt.clouddn.com/moodle-logo-concept.png\n","tags":["Moodle"],"categories":["tech"]}]